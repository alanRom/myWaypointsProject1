{"version":3,"sources":["../server/server.js"],"names":["CITY_PRECISION","googleMapsClient","require","createClient","key","Promise","app","engine","hogan","set","__dirname","use","express","static","process","env","PORT","req","res","next","header","bodyParser","json","urlencoded","extended","get","reactMarkup","store","url","locals","status","render","post","requestDetails","body","request","mode","travelMode","toLowerCase","directions","asPromise","then","results","routes","forEach","points","element","overview_polyline","selectedPoints","i","length","push","promises","map","reverseGeocode","latlng","elem","all","uniqueCities","cityInfo","resultsArray","address","place","formatted_address","split","city","query","parseFloat","indexOf","stateZipSplit","addressToLookup","state","zip","lat","lng","promiseArray","resolve","reject","axios","weather","weatherResult","data","catch","cities","weatherResults","err","console","log","location","geocodeResult","locationDetails","listen","info","NODE_ENV"],"mappings":"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","file":"server.js","sourcesContent":["import React from 'react'\r\nimport { renderToString } from \"react-dom/server\";\r\nimport { StaticRouter as Router, matchPath } from 'react-router';\r\nimport express from 'express'\r\nimport hogan from 'hogan-express'\r\nimport { Provider  } from 'react-redux'\r\nimport store from '../react/store';\r\nimport bodyParser from 'body-parser';\r\nimport decodePolyline from 'decode-google-map-polyline';\r\nimport axios from 'axios';\r\n\r\nconst CITY_PRECISION = 10;\r\n\r\n// Routes\r\nimport App from '../react/app'\r\n\r\n//Google Maps\r\nvar googleMapsClient = require('@google/maps').createClient({\r\n    key: 'AIzaSyCrm3ndY68Krfr0ZAh5h70xHqEPhnp44ww',\r\n    Promise: Promise,\r\n  });\r\n\r\n// Express\r\nconst app = express()\r\n\r\n\r\napp.engine('html', hogan)\r\napp.set('views', __dirname + '/views')\r\napp.use('/', express.static(__dirname + '/public/'))\r\napp.set('port', (process.env.PORT || 3000))\r\napp.use(function(req, res, next) {\r\n    res.header('Access-Control-Allow-Origin', '*');\r\n    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\r\n    next();\r\n});\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\n\r\napp.get('*',(req, res) => {\r\n    \r\n    const reactMarkup = renderToString(\r\n        <Provider store={store}>\r\n            <Router context={{}} location={req.url}>\r\n                <App />\r\n            </Router>\r\n        </Provider>\r\n    )\r\n\r\n    res.locals.reactMarkup = reactMarkup\r\n\r\n    res.status(200).render('index.html')\r\n})\r\n\r\n\r\napp.post('/directions', (req,res) => {\r\n    var requestDetails = req.body.request;\r\n    requestDetails.mode = requestDetails.travelMode.toLowerCase();\r\n    delete requestDetails.travelMode\r\n    googleMapsClient.directions(requestDetails).asPromise()\r\n    .then(results => {\r\n        if(results.json.routes){\r\n            results.json.routes.forEach(element => {\r\n                var points = decodePolyline(element.overview_polyline.points);\r\n                var selectedPoints = [];\r\n                for(let i = 0; i < points.length; i+=CITY_PRECISION){\r\n                    selectedPoints.push(points[i]);\r\n                }\r\n                points = null;\r\n\r\n                let promises = selectedPoints.map(elem => {\r\n                    return googleMapsClient.reverseGeocode({latlng: elem}).asPromise()\r\n                });\r\n\r\n                Promise.all(promises).then(resultsArray => {\r\n                    var uniqueCities = [];\r\n                    var cityInfo = [];\r\n                    resultsArray.forEach(place => {\r\n                        var address = place.json.results[0].formatted_address.split(/,/g);\r\n                        var city = address[1];\r\n                        var latlng = place.query.latlng.split(',').map(parseFloat);\r\n\r\n                        if(uniqueCities.indexOf(city) == -1){\r\n                            var stateZipSplit = address[2].split(' ')\r\n                            var addressToLookup = {city: city, state: stateZipSplit[1], zip: stateZipSplit[2], lat: latlng[0], lng:latlng[1] }\r\n                            uniqueCities.push(city);\r\n                            cityInfo.push(addressToLookup);\r\n                        }\r\n                        \r\n                    })\r\n\r\n                    let promiseArray = cityInfo.map(city => {\r\n                        return new Promise((resolve,reject) => {\r\n                            axios.get(`https://api.openweathermap.org/data/2.5/forecast?zip=${city.zip},us&units=imperial&appid=0e4ff9a19d12c0025cdb34c4349609a1`)\r\n                            .then(weatherResult => {\r\n                                city.weather = weatherResult.data;\r\n                                resolve(city);\r\n                            })\r\n                            .catch(err => {\r\n                                city.weather = null;\r\n                                resolve(city)\r\n                            })\r\n                        });\r\n                    });\r\n\r\n                    Promise.all(promiseArray).then(weatherResults => {\r\n                        res.json({\r\n                            results: results,\r\n                            cities: weatherResults,\r\n                        })\r\n                    })\r\n                    .catch(function(err){\r\n                        console.log(err);\r\n                        res.json({\r\n                            results: results,\r\n                            cities: [],\r\n                        })\r\n                    })\r\n                    \r\n                    \r\n                })\r\n                \r\n                \r\n            })\r\n\r\n        } else {\r\n            res.json({\r\n                results: results,\r\n                cities: [],\r\n            })\r\n        }\r\n    \r\n        \r\n    })\r\n})\r\n\r\n\r\napp.post('/locationDetails', (req,res) => {\r\n    var location = req.body.location;\r\n    googleMapsClient.reverseGeocode({latlng: location}).asPromise()\r\n    .then((geocodeResult) => {\r\n        return res.json({\r\n            locationDetails: geocodeResult.json.results[0],\r\n            status: geocodeResult.json.status,\r\n        });\r\n    })\r\n})\r\n\r\napp.listen(app.get('port'))\r\n\r\nconsole.info('==> Server is listening in ' + process.env.NODE_ENV + ' mode')\r\nconsole.info('==> Go to http://localhost:%s', app.get('port'))"]}